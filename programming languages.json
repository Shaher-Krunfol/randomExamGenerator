
[
    {"question": "What is the difference between compiled and interpreted programming languages?", "answer": "Compiled languages are translated into machine code before execution, while interpreted languages are translated line by line during execution."},
    {"question": "What is the difference between a compiled language and an interpreted language?", "answer": "Compiled languages are translated into machine code before execution, while interpreted languages are translated line by line during execution."},
    {"question": "Explain the concept of object-oriented programming (OOP) and its main principles.", "answer": "Object-oriented programming is a programming paradigm that uses objects – data structures consisting of data fields and methods – and their interactions to design and build applications. The main principles include encapsulation, inheritance, and polymorphism."},
    {"question": "What is a lambda function in programming, and in which programming languages is it commonly used?", "answer": "A lambda function is an anonymous function that can have any number of input parameters and a single expression. It is commonly used in functional programming languages like Python, JavaScript, and Ruby."},
    {"question": "Discuss the differences between procedural programming and object-oriented programming.", "answer": "Procedural programming is based on procedures or routines, while object-oriented programming is based on objects that encapsulate data and behavior. OOP provides concepts such as encapsulation, inheritance, and polymorphism."},
    {"question": "What is the purpose of a version control system (VCS) in software development?", "answer": "A version control system tracks changes to source code and other files, allowing multiple developers to collaborate on a project. It provides features like version history, branching, and merging."},
    {"question": "Explain the concept of garbage collection in programming languages.", "answer": "Garbage collection is an automatic memory management process where the programming language runtime system identifies and reclaims memory that is no longer in use, preventing memory leaks."},
    {"question": "What is the significance of the SOLID principles in object-oriented design?", "answer": "The SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion) are guidelines for writing maintainable and scalable software by promoting modularity and flexibility."},
    {"question": "Discuss the differences between static typing and dynamic typing in programming languages.", "answer": "In static typing, variable types are determined at compile-time, while in dynamic typing, types are determined at runtime. Static typing can catch errors early, while dynamic typing provides flexibility."},
    {"question": "What is a design pattern in software development, and why are they used?", "answer": "A design pattern is a reusable solution to a common problem in software design. Design patterns provide a standard approach to solving recurring design problems, making code more modular and maintainable."},
    {"question": "Explain the concept of multi-threading in programming and its advantages.", "answer": "Multi-threading allows multiple threads (smaller units of a process) to run concurrently. It can improve program responsiveness and efficiency by utilizing multiple CPU cores."}
]
